/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereVirtualMachineClassObservation struct {

	// The percentage of the available CPU capacity which will be reserved.
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The number of CPUs.
	Cpus *float64 `json:"cpus,omitempty" tf:"cpus,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The amount of memory (in MB).
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The percentage of the available memory capacity which will be reserved.
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The name of the virtual machine class.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A comma-separated list of GPU devices.
	VgpuDevices []*string `json:"vgpuDevices,omitempty" tf:"vgpu_devices,omitempty"`
}

type VSphereVirtualMachineClassParameters struct {

	// The percentage of the available CPU capacity which will be reserved.
	// +kubebuilder:validation:Optional
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The number of CPUs.
	// +kubebuilder:validation:Optional
	Cpus *float64 `json:"cpus,omitempty" tf:"cpus,omitempty"`

	// The amount of memory (in MB).
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// The percentage of the available memory capacity which will be reserved.
	// +kubebuilder:validation:Optional
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The name of the virtual machine class.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A comma-separated list of GPU devices.
	// +kubebuilder:validation:Optional
	VgpuDevices []*string `json:"vgpuDevices,omitempty" tf:"vgpu_devices,omitempty"`
}

// VSphereVirtualMachineClassSpec defines the desired state of VSphereVirtualMachineClass
type VSphereVirtualMachineClassSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVirtualMachineClassParameters `json:"forProvider"`
}

// VSphereVirtualMachineClassStatus defines the observed state of VSphereVirtualMachineClass.
type VSphereVirtualMachineClassStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVirtualMachineClassObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVirtualMachineClass is the Schema for the VSphereVirtualMachineClasss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVirtualMachineClass struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cpus)",message="cpus is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.memory)",message="memory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   VSphereVirtualMachineClassSpec   `json:"spec"`
	Status VSphereVirtualMachineClassStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVirtualMachineClassList contains a list of VSphereVirtualMachineClasss
type VSphereVirtualMachineClassList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVirtualMachineClass `json:"items"`
}

// Repository type metadata.
var (
	VSphereVirtualMachineClass_Kind             = "VSphereVirtualMachineClass"
	VSphereVirtualMachineClass_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVirtualMachineClass_Kind}.String()
	VSphereVirtualMachineClass_KindAPIVersion   = VSphereVirtualMachineClass_Kind + "." + CRDGroupVersion.String()
	VSphereVirtualMachineClass_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVirtualMachineClass_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVirtualMachineClass{}, &VSphereVirtualMachineClassList{})
}
